>> NINGNING: We are waiting for the set up. Is the next figure somewhere? The next speaker will talk us about modular models of Monoids with Operations. 
>> ZHIXUAN:  I did this work with my head supervisor Nicolas Wu who will be here tomorrow. And us talk about new perspective on algebraic effects. And the goal of this talk is to develop a new perspective. Which encompasses more general forms of operation such as exception caching, parallel composition of concurrent programmes and acquiring a lock and so on. And this new perspective also encompasses non monadic effects. But before I explain what all of this means, I will spend the first half of my talk, a brief recap on the history of what  modern income be additional facts, so if the stuff doesn't make sense to you now, hopefully it will make more sense to you in ten minutes.
 35 years ago Moggi used Monads and this is the first review frustrate. Let's review what Monad is. Today I will start in a different way and introduce internal linkages of categories to present categories. As much as possible. So say figured most my audience here is familiar with that theory. And the unary type theory. And set up three types of in a family of set up terms and set of judgmental equality some terms. And using variable from the context and using previous primitive term set as, and judgmental quantities between the terms of the slang which were
 For example, this is in a category with just one object * and two more prisms and another more for some with the composition of after is the identity. This means the category is presented by3 the which just one based object. And one for me, primitive ten F and while function seeing that, after of F of X is equal to X. So this through the rules, the rules that we have in general, but for some theories we have additional structures such as function types or product types. And it is just a time constructor, were the type tell is the type of competitions that computes values. And the tab construct always comes with the template return the letter in the slides. Which says that for every term e  term e is supposed to be the pure computation that just returns the T. That's as whenever we have a combination of E1 that computes some tour value and another competition is a context of eight-hour value. Then we have a crucial composition of a-- let's say on the site, the 210 formers, return and let repurchase advice some judgmental return and let are required to satisfy judgmental appliances. So some well-known examples, we have the effect, mutable stat, which is modeled by this, monad function type and the product type in the unary type theory. These are just simple examples of monads. The a more sophisticated ones. For example how you store or concurrency etc.
 One question is, where do this come from? Should they expect ourselves to just be able to spell out monad magically, whenever you have new computational affect right. They should logically come from somewhere. And should understand monads the understanding the algebraic series of effective of operations. Algebra three is just a bunch of operations with a bunch of equations, you may know the algebra three on monads where it has to operations and the barrier operation and a lower rate operation. And the thyroid operation is associative and so on. And so here, the perspective is that we should understand monads thing about the a direct series that we should understand. By thing about the Aldrich series of their operations. For example, the three of now determining has to operations. Which is supposedly to be language, a lot of-- which is supposed be a failure. The equations kind of depend on what we mean by the non- I see. But you and I have a nice associativity for choice. And the operations get and put for reading and writing the state corresponding. And the questions characterise the interaction between rating and getting. And then just show one of them and how to push series are eventually for talking about models. Model of our arbitrary, as basically the time. Equipped with the attempts of the implement with the operations of this type. For example. A model of the theory of the set, three things, Taipei and two times she and --which implement the type put get this type A and required to certify the equations of the series. And under certain conditions which I'm going to slip under a rock for the topic every argument three has three models. Which are intuitively just subjective terms for the operations from the three. And motion to by the equations from the theory. For example, the free model of the series of the state, this quotient we have here, we're variable founder for type tout and S cross means synthetic put operation and SRL is a synthetic data operation and then the quotient this datatype with the equations found the theory of a. And many monads model competition affects can be obtained from the algebraic series of operations. So the computation of effects determining the monads. So since three models are syntactic terms. Whenever we have a modal a and a term R and that maps the variables and then we have a third of those entireties, which I'm writing is a handle. With on the slide, because the operational intuition is that every element is say of the free model is competition without invokes. The operations from the three is a semantic model. Provides the implementation so they can handle the operation just like a system colour handles certain calls from the client programme. And this construction was turned into a language feature. Known as your fake handlers, by 14 and predator. And turns out to be a useful feature. So not only allows the programmer to easily define element of the model we have some really nice properties for making them very simple for practical purposes. The --is what I'm calling syntactic modularity here. The algebra series of two effects can be easily combined. By taking the coproduct of operations and coproduct of their operations. And by adding some new equations care to rising their interaction. And it means the effects can be moderately handled. Sophie programme involves operations, we can first handle operations and Sigma two are handled. So we finished with a history of modelling computation affects. So what's in our paper? The nuisance in our paper are motivated by two issues in algebraic effects. The first issue is that we notice that the crucial composition is the real operation means arduous area of an effect. Which means that is emergence operation it to happen to exist under the free models. So consequently we cannot use the equations to characterise the intended behaviour or intended interaction between operations and the sequential operations. For example, and non-demand is him, we want to state the property that every competition ask followed by failure is --but here X stands for capitation, or Romans of a model. But in general, a model doesn't have structure for sequential composition. So we cannot meaningfully state this property as an equation as in arbitrary facts. And moreover, sequential conversation on the free models. Necessarily satisfy a property sometimes called algebraicity. And now we can use algebraic effects to model this operations. And somewhere there are concepts but the effects are only available monads so that is one more. So the issues motivate our. So first of all to make some crucial sequential conversation-- to make sequential conversation a real operation will shift our perspective from outer series of operations and types of algebra series. Monads with operations. And we are also generalized monads to the more general concept of Malloy's in categories. So we can move things like series of operations of mixing factors. And I would like to preserve the last properties. Of effects is the semantic and syntactic modularity's that I just mention. Let me first recap what the category is in the types and compared to the category. The internal language is a new type form, box here. And allows us to pair together terms. And this is also this template, this rule here introduces context would just more than one variable into the language. Which previously didn't have.
 In the context in this language is in India, so we cannot throw away or duplicate variables. In fact if it's very linear, we cannot even exchange the order. A variables in the context. And we also have in relation we have, which allows us to unpack the contacts. And also similar my noise will unit type. It's down to components. And the rules and emulation rules and introduction rules are required to satisfy some judgmental sequences. Using this test rate we can express the theory of the monoids in a way that you are expecting. So survey amount monoids of had to operations on some type tell.-- on the left and the right at cc. New is associated. So syntax the survey looks exactly the same as the rule. So for example it is in the category of --where the product is interpreted in sequential final composition. And then Monoids become known as instead some real product. Is interpreted as something known as the date tensor product. And categories are very general construction. That encompasses, many absorption that we use for more computation affects. But what we are really interested Monoids in with operations. The three with operations is just the theory now. And equipped with new operation. Who signature can be arbitrary function, which is very general. And it may have some new equations, characterizing the properties of this operation. And even maybe it's interaction with manoid structure. And for example the theory of throw cannot be series of --theory of-- with oppression whose signature is the constant factor to the unique type. The theory of the state affect and it has the equations including the other equations characterizing interaction we can get. So the other things that we can cover, is now we can model more general form operations. In particular we can model operations which do not satisfy our occupancy. And the operations include exception cashing in parallel composition. Now they can be modeled. Certainly no we can mention conversation meaningfully. Now set the equation that we can before. And since we have generalized for more labs to my noise, we can talk about series of art negative functions Monads and and so on. Just like before every set of theory has three eligibles and in particular initials rough-cut since such a theory, extends the same  of theory Monoids. Of generalizing the cup additional facts determining molecules to commutation only affects determining Malloids. And this is the issue algebra something like a tree structure, considered by the equations. So we don't have any equations, we specialized them in a little product to function composition. Then this type can be lamented in-- this type, which is quite some onto the US frame owner, and Haskell, except that now the signature factor can be a higher order function rather than audio refund chair. Because when Jerry talk in the-- and going to go in more details on this datatype. If you're interested in the actual limitation of the sense that I've been talking about, go to his talk. Thank you. And that is also theoretically interesting sense that we can say. That we can you guys all the series of Maloids of operations into some subcategories. Which I'm called, which includes all the series of operations. Who signature partnership a cut tell. And the three family of scoop operations. Which includes the operations that limit some scopes. Just like exception. And we have the variable family for the binding operations. And the it turns out that the family has algebraic operations has a category that is equivalent to the category of --pick so where we have generalized the classical --to say correspondence. To Maloid correspondence. And we can show that the algebraic operations as a co reflective subcategory of a very wide class of series. And the co reflects or preserves initial algebra. Which practically means that as far as the syntax is concerned. The operations can be assimilated by algebra, operations. That's nothing to say that semantic modularity is forging reality of our framework. Is not automatic. So this is different from traditional a drink facts. So instead we need to recover semantically modularity by formulating looting of most models. And is basically a collection of match beings which is equipped with some sigma operations where the Sigma is in the family of F. To a new alloyed equivalent with both Sigma operation and a gamma operation. So modular models are pretty much like monotonous modules like more transformer sends a Mona to while my modular models sense Malloy that you equipped with operations. And construct the models in the paper which you may go to if you are interested in it. That is me, that's basically what I wanted to talk about today. So the take-home message of our work and my talk is that this is beneficial to do a shift of perspective when considering algebraic effects from considering algebraic theories of objects, of types to our true series or monads to more generally malloys. And this gives perspective a lot more. Thank you. 
>> Hello -- here, very nice talk. You can say that you can support the parallel composition, right? Do you consider the concurrent objects or do you even try? 
                >> ZHIXUAN: The meaning of parallel composition can vary a lot. And what I mean here is that we can consider a particular theory of concurrent composition. And the version that I consider is pretty much like I calculus. 
>> Okay. All right. The modular, modularity you defined in the previous slide seems to say that you can, I assume Sigma, and the gamma can contain for operations. So do you parallel, position and sequential composition to be part of the Sigma? 
                >> ZHIXUAN: Yes, so say you're for example, a gamma here can be impacted to the summary of partly composition. And a modular model. Which we do have one for this theory. Of parallel, position. So since every -- for example equipped with some operation to decrypt with parallel, position and the old operations. And this construction is basically quite similar to the existing four models of pi calculus. But I can imagine some other models for example when they consider some particular scheduling policy. Choosing behaviour of this model. Of this theory. 
>> Okay thank you. 
                >> .: Thank you. 
>> Yeah we have time to take more questions. 
>> This seems to be giving a very nice, general free work of reason about semantics. Have you thought about how to materialize this is a programming language construct? 
                >> ZHIXUAN: Yes, sure. So first of all can be readily implanted in some programming languages as the category. And talk about this and Haskell we don't have equations but you can imagine we can say-- we count programmes is basically you know a very familiar way. But of course we can also internalize all the constructions and some language features. The design space for this is kind of huge. We can say specialized the general from work to say some monads or all integer punches. Or we can return the forge reality-- and that of course means in this programme language in this we need to be very expressive of other categories and so likely that language will be dependent type language. We can express all this capital concept. Thank you. 
>> Any more questions from the audience? 
>> 
                >> ZHIXUAN: Very happy to have this talk so if you want to challenge me or talk to me please come to me. 
>> I have a question, so you know like original definition of effect like plot-- and power and we have many variants of like effect handlers and higher effect or effects and likely to effect. I'm not sure if that affects some of the framework and provides some theoretical foundations to those frameworks? 
                >> ZHIXUAN: Exactly. So one would ration for doing this work is that we are having two variations of arbitrary effects that includes the scope operations which my supervisor contributed to. And we have something like the hefty algebra and the latency affects. And currently having too many variations. So one variation for our work is just to have a very general free market like that encompasses all of those frameworks. 
>> That sounds really cool. Okay thank you again for this great talk. 
>> ZHIXUAN: Thank you.
