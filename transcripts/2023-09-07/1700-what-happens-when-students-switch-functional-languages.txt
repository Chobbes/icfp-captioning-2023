>>, second speaker is Kuang-Chen Lu, and telling us about what happens when students switch functional languages, please take it away.  Kuang-Chen Lu from Brown university and going to talk about what happens when students switch languages, especially when functional languages are involved.  Students are usually taught multiple languages in CS curriculum.  So interesting to study what happens when people learn subsequent language.  There is few things to consider when we study language transfer.   Starting in the 805 several authors studied students learning a second language after the first one, most recently our coauthor has written several papers on the topic which is the direct inspiration for this work.  She studies transfer between two languages and her main finding is when the syntax and semantics are similar there is good transfer, when the syntax is similar but the semantics is different there is bad transfer, and syntax is different little effect.  
However, none of her studies incomplete involve functional programming.  Which is what we explore in the talk.  
And so he with want to study the impact of  syntactic difference and semantic difference we have to choose a pair of programming languages. There is a key trade off here, if we use a language already used we get all the software and all the materials that could be useful.  But at a cost.  We have no real control over the syntax or semantics and have to get lucky to find a suitable... in contrast, we could of course build custom languages with Court of Appeal the syntax and semantics we want, but won't have the same level or support, which means, we may accidentally be studying the supporteds, rather than the languages themselves.  But we have a lucky compromise.  Pyret.  Districtly inspired by python, and meant to be somewhat similar.  And both use keywords and both use columns to indicate start of a block.  So this is a case of similar syntax, but different semantics.  
In contrast, Pyret was heavily modeled on the semantics of Racket but designed to have much more conventional syntax, python like syntax, so get pair of language with differing syntax, with similar semantics and so what did we decide to do.  Two studies transfer from racket to Pyret and one from Pyret to python.  We also need to make a decision, or the choice of research environment. Let me expand on what I mean, they are true ...there are two natural choices of environment in a lab setting where we pay students to visit And in courses where the data are collected by assignments and exams in lab setting, we are free to do things like randomized control trials, which control all confounders with randomness. It is hard or even impractical to do so in courses because  students may talk to each other, and breaks the independence of two groups, and if we believe one is inferior, imposing that on students would be motherly wrong... students may come for money, rather than learning so their motivation is different.  
In courses, tasks are designed in context of a course, which means, for example, they can depend on earlier lectures or assignments.  Laptops however have to be self contained.  
Our earlier discussion about programming languages is also related to ecological validity.  Researchers might want to create custom languages to control syntacti differences and semantic differences and also breaks ecological validity, because the custom languages might have less sophisticated supports and it's hard or expensive or even impossible to do longitudinal study in in a lab setting because we need to ask students to visit multiple times, in courses students might drop courses or enroll, especially the beginning of the semester and population is usually relatively stable and can repeatably measure their performance via multiple assignment and exam.  And last but not least, we can measure anything we care about in a lab setting, however the measurement better fit in the course content and help students learn, we feel it's wrong to ask students to do task, that only help us do research, and not only tribute to their own learning. 
So what did we decide to do.  We use the course context to get the most useful data.  
First, let's look at what we found when students saw pyret after having worked with racket.  Most students in the study have program background, their background is mostly in java C#, C + + or python.  Few students if any had functional programming experience. 
And these students are not familiar with Pyret as second language, 87% not familiar at all.  And 10% slightly familiar.  And only one moderately familiar.  And so because we know their functional programming experience is from racket rather than from somewhere else.  When students saw Pyret they used racket for one month, after recursive processing functions and higher order functions and asked students many questions about their intuition with Pyret programs, the most interesting questions look like this.  And present student a program and ask them to predict the result of running the program.  Note that we have an I don't know option.  This way students are not forced into one of the choices.  
First of all, students seem to transfer their knowledge from racket to Pyret despite the evidence syntacti differences in particular they have little trouble understanding recursive list processing patterns and high order functions and both common in racket, but less likely to appear in students prior experience however not everything was perfect, here is an interesting difficult question.  Definition of variable in the same block is not allowed in racket, as in many functional languages.  It is also not allowed in Pyret because it has semantics similar to racket.  However, 54% of students consider this racket program okay.  Which was already sad news.  
And worse still, the percentage goes up 87% in the Pyret version, we sue expect the situation in Pyret is influenced by students piroi experience in python, or languages with similar syntax, and setting aside the outliers what did we find.  The most important finding is that, at least in this population, we see transfer happens.  Despite racket being syntactically very different than Pyret.  Let's move on to the next study.  Pyret to python, we did this study with different population.  Only 44% of students reported having prior programming experience, however, 25% have python experience, students switch to python after 2 months of Pyret.  We studied many language differences, for example, if it's an expression in Pyret, and statement in python, and python has weird scoping rules, like and python, allow definition of variables.  Python has return statement, and print, and for-loops which can be confusing when combined with return and print, and couple other differences presented in the paper, but I omit them here.  
This differences are not specific to python.  
And this language features common to many imperative languages, and many of them are unusual in functional language.  
And we first asked students to program results answering multiple choice questions, like we did in the previous study.  For most of the questions, very few students were able to give correct answers.  
Even student with python background did poorly.  
What did we learn?
So far, we have learned that students can not interpret program.  They struggle to predict python program resulteds, and after looking at students preresponses carefully, and notice many of the wrong answers related misconceptions and misunderstanding about return.  And we changed the question format, this time students were given an expected result and asked to explain why the program doesn't produce it. Most students gave reasonably correct answers, that is students could provide the correct debugging suggestions.  We can not rigorously compare this question format to the previous one, because students had been given lectures and assignments before the new tasks and the programs are different, however given the dramatic change in the correct rate, such debugging questions might be easier than the interpreting questions.  
Also, debugging questions have higher ecological validity than predict the result of the program.  If I ask myself why we care whether students you say semantics I say I want them to write program efficiently, and read efficiently, or to debug efficiently, but not interpret program efficiently.  And not saying the ability to interpret a program is worthless, but less similar to the task. 
And future work is required to figure out which kind of questions, that better capture the skills we want students to master.  These are the programs we use in the stage.  
They are all about print and return.  
Please spend a moment to read the code, and decide answers.  

>> 
>>  Hi, Katie K from Portland state university and been teaching beginner full time program, for past couple of years, and very interesting study results, I think one thing jumped out to me, is seeing in the confusion with python, things frequently see in students struggle with their first language as well.  Things, and in particular I think the issue with confusing kind of static and  dynamic scoping I see very commonly in students who have you know, been programming even in C + +. Or Python for a couple years. So I guess I have a very broad and vague question which is, well, first of all, as you  mentioned at the end, it does seem like potentially a reasonable hypothesis that maybe the difference might come down to, you know languages like Pyret have arguably less different moving parts in there semantics been a language like Python and it might simply be a matter of number of concepts or something. But I suppose the other part I'm curious about is what do you think we can do -- I realize that's a very broad question.  But as kind of educators, what do you think we can do to try and make sure that students don't make it several years into the programming a language before they realize they don't understand basic features of the language, and I found that student often get at least a year or two into the programming the languages that you teach them before they start to notice errors and semantics on the lines and tokens of individual functions.  Do you think there is anything from this that suggests an approach to help students be more careful and close read their programs more.  Does that make sense?

>>  Let me make sure I understand your question, you are saying students often need a couple years to realize that they have misunderstanding about... okay... okay.  
>>  Yes, exactly.  I find that students will often kind of in my third or fourth year classes they never quite learned their first language. 

>>  Can I jump in a little bit as coauthor here, we have actually been doing research for several years on the question, and 5 or 6 years ago, studied student understanding of the things like scoping rules, and found exactly what you said, even upper level students having difficulty, and ironically, they had more difficulty in languages like java they programs extensively, than in racket which which they programming for one semester, and forgotten all about.   So I think part of this moving higher moving parts hypothesis is valid. These are persistent, I think KC, is being a little modest here, because in fact, his dissertation is building a tutor to help students understand exactly these kinds of concepts, and it's very interesting, and because it's built specifically.  And a lot of tutors going to teach you something from scratch, but KC's tutor instead says, we are going to assume you have some basic programming  knowledge, but we are going to take the misconceptions we have identified from the literature and from our own research and build a tutor literally around fixing those misconceptions,  d build a tutor, literally around fixing those misconceptions, using some techniques from like educational psychology. So, that is I think our best answer for now KC do you have a better answer than your dissertation. 
>>  Well, many misconceptions we study here, report found in the group, and I think are widespread, and I hope my... can help solve the problem partially. 
>>  Awesome sounds good.  I look forward to reading that. 
>>  You can also drop us a note, and happy to share with you.  We have about half a dozen university using it now, and just drop us a note and take a look and see for yourself if it's any use. 
>>  High, Mike S active group.  A lot of schools use python as introlanguage, as their first language, and I wonder if if you are aware any confusion that curse with students there, in other words is the confusion about python, because difference between your language and python, or just plain confusing in python.  
>>  So I guess this is related to our discussion at the end, that it's unclear where the difficulty are from transfer from the python language, itself, so for the return, I tend to think, it's python... okay, I think... at least scoping issue.  Should be something that... about program language in general.  
Do you have some thoughts. 
>>  Yeah, I guess what I would say is Mike, you know, python is basically not a critically evaluated language, it's used because people think it's the thing to use, and once you think it's the thing to use, don't really question it like java or C + + before, there is actually decent research, shown all confusion students have learning python CS1.  But are not results particularly popular in the community. 
So is a bit of research, and not a whole lot, and not critically evaluated much, and when it is found somewhat problematic, and move along.  Are the misconceptions reported in the paper similar to what you found. 
>>  In that paper even more rudimentariry.  It's... because they were doing Python first and so they were at an even more basic level, for example indentation causes  all kinds of problems being you know, indentation specific sensitive in the language,
>>  Who had a thought.  
>>  Who had thought.  In fact, the design as you can see from KC design, was carefully set up the paper so that doesn't even become an issue, right, so you don't have the wrestle with the cold in editor with the ups and downs. 
>>  I had a question about the study design, one, like you said, these are two specific languages, you are going in one direction, have you considered going in both directions to see if it's I would assume going from python to Pyret might be a different experience than from the other way, and curious why you decided these particular directions?

>>  So, I think generally studying from functional to imperative, we believe will be easier is one thing, and also if you want to do it in a classroom, we need to do in the order that makes sense, and that's why we have Pyret.  From Pyret to python rather than other way around, and racket and Pyret, I think in that case, yes, both make sense, because they have essentially the same syntax, and semantics, and in that case, makes sense, and probably the direction will be efficient work. 

>>  Sorry, go ahead. 
>>  Sorry, just slightly different answer to KC we were constrained by the choice the courses we were able to make our studies in the courses we study.  And we had no choice to tell the course to go in another direction, with need to find environment where we could go in the other direction and still get quality data.  And really only thing prevents us. 
>>  And follow-up, not follow-up, but related question, so when you said, using assessment, what was motivation.  Were these graded.  
I would assume, I know you put in I don't know option, so people wouldn't be tempted to just pick one.  But, I would imagine if you were like, the correct answer gets points, and I don't know is probably not correct.  I think there could have been bias there.  
>>  I think the first one of assessments, we did not grade the first assessment, because we quantity to know their intuition of the language, and not penalize them.  But in the repeat assessment we want them to treat the task seriously, and so those things we grade on those things.  

>>  Thank you so much.  
>>  Last question.  Thanks for a great talk.  What do you think you learned about this of the role of bridge languages.  And specifically, what makes an effectively bridge language, and what are pitfalse of bridge language, and something that is transitional language perhaps just as teaching tool from one to another, or even into a concept.  
>>  Hmm... it's unclear to me that maybe the bridge language is not the best solution, if you are looking for transition.  
So, maybe it depends on your goal.  If you are just thinking the language is too complicated maybe something at language level, would be the right solution, and if you are just thinking, oh, students already know functional program, or already know imperative language and need to go to the other one.  I think in that case, the syntax might be misleading maybe choose syntax slightly different, and that's my take, want to add anything. 
>>  I know we're almost out of time, only thing I add is designing and making these rich languages is incredible amount of work, better off looking a misconceptions students have and tackling them direcly, there is good amount of literature, we'd be better off leveraging that literature and directly tackling them than inventing yet another language because we'd still have new other issues, and ... we're out of time.  Thank you for the question.  
>>  Thank you for the answer. 
>>  Great answer.  
>>  Thank you, that's the end of the session.  So enjoy a long break. 
>>  Thank you, Benjamin.  
>>  Thank you. 
